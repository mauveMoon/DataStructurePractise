#include<iostream>
#include<vector>
#include<cstdio>

using namespace std;

class UnionFind{
public:
	vector<int> father;
	UnionFind(int n){
		while(n--) father.push_back(-1);
	}
	
	int find_root(int v){
		int root = v;
		while(father[root] != -1) root = father[root];
		return root;
	}
	
	void union_root(int v1, int v2){
		int root1 = find_root(v1), root2 = find_root(v2);
		if(root1 == root2 && root1 != -1) return ;
		else father[root2] = root1;
	}
	
	bool sameSet(int v1, int v2){
		int root1 = find_root(v1), root2 = find_root(v2);
		if(root1 == root2 && root1 != -1) return true;
		else return false;
	}
	int components(){
		int ans = 0;
		for(auto it = father.begin()+1; it!=father.end();it++){
			if(*it == -1) ans++;
		} 
		return ans;
	}
};

int main(){
	int N;
	cin >> N;
	UnionFind uf(N+1);
	int v1, v2;
	bool r;
	while(1){
		char s;
		cin >> s;
		if(s == 'S'){
			int comp = uf.components();
			if(comp > 1)printf("There are %d components.\n", comp);
			else if(comp == 1) printf("The network is connected.\n");
			break;
		}else if(s == 'C'){
			cin >> v1 >> v2;
			r = uf.sameSet(v1, v2);
			if(r) cout << "yes" << endl;
			else cout << "no" << endl;
		}else if(s == 'I'){
			cin >> v1 >> v2;
			uf.union_root(v1, v2);
		}
	}
	return 0;
}
